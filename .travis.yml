language: node_js
node_js:
    - "10"

env: PATH=$PATH:$HOME/.local/bin

cache:
    directories:
        - "build"

install:
    - pip install --user awscli

stages:
    - name: build-testnet
      if: branch = develop
    - name: deploy-testnet
      if: branch = develop

    - name: build-stage
      if: branch = master
    - name: deploy-stage
      if: branch = master

    - name: build-preview
      if: branch = preview
    - name: deploy-preview
      if: branch = preview

    - name: build-legacy
      if: branch = master-legacy-20190618
    - name: deploy-legacy
      if: branch = master-legacy-20190618

    - name: build-prod
      if: tag =~ /^v\d+\.\d+(\.\d+)?$/
    - name: deploy-prod
      if: tag =~ /^v\d+\.\d+(\.\d+)?$/
    - name: deploy-electron-prod
      if: tag =~ /^v\d+\.\d+(\.\d+)?$/

jobs:
    include:
        - stage: build-testnet
          script:
              - export RECAPTCHA_SITE_KEY=$TEST_RECAPTCHA_SITE_KEY
              - export CRYPTOBRIDGE_PUB_KEY=$TEST_CRYPTOBRIDGE_PUB_KEY
              - export CHAIN_ID=$TEST_CHAIN_ID
              - export WALLET_URL=$TEST_WALLET_URL
              - export API_URL=$TEST_API_URL
              - export API_SUPPORT_URL=$TEST_API_SUPPORT_URL
              - npm install
              - npm run build
        - stage: deploy-testnet
          script:
              - ls -la ./build/dist/
              - cat ./build/dist/index.html
              - export AWS_ACCESS_KEY_ID=$TEST_AWS_ACCESS_KEY_ID
              - export AWS_SECRET_ACCESS_KEY=$TEST_AWS_SECRET_ACCESS_KEY
              - aws s3 rm s3://wallet.testnet.crypto-bridge.org/index.html
              - aws s3 sync ./build/dist/ s3://wallet.testnet.crypto-bridge.org/ --delete --exclude "assets/*"

        - stage: build-stage
          script:
              - export RECAPTCHA_SITE_KEY=$STAGE_RECAPTCHA_SITE_KEY
              - export CRYPTOBRIDGE_PUB_KEY=$STAGE_CRYPTOBRIDGE_PUB_KEY
              - export CHAIN_ID=$STAGE_CHAIN_ID
              - export WALLET_URL=$STAGE_WALLET_URL
              - export API_URL=$STAGE_API_URL
              - export API_SUPPORT_URL=$STAGE_API_SUPPORT_URL
              - npm install
              - npm run build
        - stage: deploy-stage
          script:
              - ls -la ./build/dist/
              - cat ./build/dist/index.html
              - export AWS_ACCESS_KEY_ID=$STAGE_AWS_ACCESS_KEY_ID
              - export AWS_SECRET_ACCESS_KEY=$STAGE_AWS_SECRET_ACCESS_KEY
              - aws s3 rm s3://wallet.stage.crypto-bridge.org/index.html
              - aws s3 sync ./build/dist/ s3://wallet.stage.crypto-bridge.org/ --delete --exclude "assets/*"

        - stage: build-preview
          script:
              - export RECAPTCHA_SITE_KEY=$PREVIEW_RECAPTCHA_SITE_KEY
              - export CRYPTOBRIDGE_PUB_KEY=$PREVIEW_CRYPTOBRIDGE_PUB_KEY
              - export CHAIN_ID=$PREVIEW_CHAIN_ID
              - export WALLET_URL=$PREVIEW_WALLET_URL
              - export API_URL=$PREVIEW_API_URL
              - export API_SUPPORT_URL=$PREVIEW_API_SUPPORT_URL
              - npm install
              - npm run build
        - stage: deploy-preview
          script:
              - ls -la ./build/dist/
              - cat ./build/dist/index.html
              - export AWS_ACCESS_KEY_ID=$PREVIEW_AWS_ACCESS_KEY_ID
              - export AWS_SECRET_ACCESS_KEY=$PREVIEW_AWS_SECRET_ACCESS_KEY
              - aws s3 rm s3://wallet.preview.crypto-bridge.org/index.html
              - aws s3 sync ./build/dist/ s3://wallet.preview.crypto-bridge.org/ --delete --exclude "assets/*"

        - stage: build-legacy
          script:
              - export RECAPTCHA_SITE_KEY=$LEGACY_RECAPTCHA_SITE_KEY
              - export CRYPTOBRIDGE_PUB_KEY=$LEGACY_CRYPTOBRIDGE_PUB_KEY
              - export WALLET_URL=$LEGACY_WALLET_URL
              - export API_URL=$LEGACY_API_URL
              - export API_SUPPORT_URL=$LEGACY_API_SUPPORT_URL
              - npm install
              - npm run build
        - stage: deploy-legacy
          script:
              - ls -la ./build/dist/
              - cat ./build/dist/index.html
              - export AWS_ACCESS_KEY_ID=$LEGACY_AWS_ACCESS_KEY_ID
              - export AWS_SECRET_ACCESS_KEY=$LEGACY_AWS_SECRET_ACCESS_KEY
              - aws s3 rm s3://wallet.legacy.crypto-bridge.org/index.html
              - aws s3 sync ./build/dist/ s3://wallet.legacy.crypto-bridge.org/ --delete --exclude "assets/*"

        - stage: build-prod
          script:
              - export RECAPTCHA_SITE_KEY=$PROD_RECAPTCHA_SITE_KEY
              - export CRYPTOBRIDGE_PUB_KEY=$PROD_CRYPTOBRIDGE_PUB_KEY
              - export CHAIN_ID=$PROD_CHAIN_ID
              - export WALLET_URL=$PROD_WALLET_URL
              - export API_URL=$PROD_API_URL
              - export API_SUPPORT_URL=$PROD_API_SUPPORT_URL
              - npm install
              - npm run build
        - stage: deploy-prod
          script:
              - ls -la ./build/dist/
              - cat ./build/dist/index.html
              - export AWS_ACCESS_KEY_ID=$PROD_AWS_ACCESS_KEY_ID
              - export AWS_SECRET_ACCESS_KEY=$PROD_AWS_SECRET_ACCESS_KEY
              - aws s3 rm s3://wallet.crypto-bridge.org/index.html
              - aws s3 sync ./build/dist/ s3://wallet.crypto-bridge.org/ --delete --exclude "assets/*"

        - stage: deploy-electron-prod
          os: osx
          script:
              - export RECAPTCHA_SITE_KEY=$PROD_RECAPTCHA_SITE_KEY
              - export CRYPTOBRIDGE_PUB_KEY=$PROD_CRYPTOBRIDGE_PUB_KEY
              - export CHAIN_ID=$PROD_CHAIN_ID
              - export WALLET_URL=$PROD_WALLET_URL
              - export API_URL=$PROD_API_URL
              - export API_SUPPORT_URL=$PROD_API_SUPPORT_URL
              - export CSC_IDENTITY_AUTO_DISCOVERY=false
              - export GIT_USER="cryptobridge"
              - export GIT_TOKEN=$PROD_GIT_TOKEN
              - export GIT_REPOSITORY="cryptobridge-ui"
              - export PACKAGE_VERSION=$(grep '"version"' package.json | cut -d '"' -f4)
              - export ARTIFACT_PATH="build/binaries"
              - export ARTIFACT_WIN="CryptoBridge-$PACKAGE_VERSION-Setup.exe"
              - export ARTIFACT_MAC="CryptoBridge-$PACKAGE_VERSION.dmg"
              - export ARTIFACT_LIN="CryptoBridge-$PACKAGE_VERSION-amd64.deb"
              - npm install
              - npm run package-all
              - ls -la $ARTIFACT_PATH
              - |
                  release=$(curl -XPOST -H "Authorization:token $GIT_TOKEN" --data "{\"tag_name\": \"v$PACKAGE_VERSION\", \"target_commitish\": \"master\", \"name\": \"v$PACKAGE_VERSION\", \"body\": \"\", \"draft\": false, \"prerelease\": false}" https://api.github.com/repos/$GIT_USER/$GIT_REPOSITORY/releases | grep '"upload_url"' | cut -d '"' -f4) #  | jq -r '.upload_url'
              - upload_url="${release%\{*}"
              - curl -XPOST -H "Authorization:token $GIT_TOKEN" -H "Content-Type:application/octet-stream" --data-binary @"$ARTIFACT_PATH/$ARTIFACT_WIN" $upload_url?name=$ARTIFACT_WIN
              - curl -XPOST -H "Authorization:token $GIT_TOKEN" -H "Content-Type:application/octet-stream" --data-binary @"$ARTIFACT_PATH/$ARTIFACT_MAC" $upload_url?name=$ARTIFACT_MAC
              - curl -XPOST -H "Authorization:token $GIT_TOKEN" -H "Content-Type:application/octet-stream" --data-binary @"$ARTIFACT_PATH/$ARTIFACT_LIN" $upload_url?name=$ARTIFACT_LIN
